#!/bin/bash

# --- Configuration ---
RESOURCE_MANAGER_REPO="git@gitlab.cldx.io:ai-ml/platform-core/cx-resource-manager.git"
RESOURCE_MANAGER_BRANCH="dev"
RESOURCE_MANAGER_DIR="resource-manager"
RESOURCE_MANAGER_IMAGE="resource-manager:1.0.0"

# --- Functions ---
log() {
    echo -e "\033[0;32m[INFO]\033[0m $1"
}

error() {
    echo -e "\033[0;31m[ERROR]\033[0m $1"
    exit 1
}

# --- Main Function ---
update_resource_manager() {
    log "Starting update for resource-manager..."

    # 1. Clean up old build and repository
    log "Cleaning up old build directory..."
    if [ -d "$RESOURCE_MANAGER_DIR" ]; then
        rm -rf "$RESOURCE_MANAGER_DIR"
    fi

    # 2. Clone the latest changes
    log "Cloning the latest version of $RESOURCE_MANAGER_REPO..."
    git clone --branch "$RESOURCE_MANAGER_BRANCH" "$RESOURCE_MANAGER_REPO" || error "Failed to clone repository."

    # 3. Build the new Docker image
    log "Building new Docker image for resource-manager..."
    cd "$RESOURCE_MANAGER_DIR" || error "Failed to change directory."
    mvn clean package -DskipTests || error "Maven build failed."
    docker build -f src/main/docker/Dockerfile.jvm -t "$RESOURCE_MANAGER_IMAGE" . || error "Docker build failed."
    cd ..

    # 4. Import the new image into k3d cluster
    log "Importing the new image into the k3d cluster..."
    k3d image import "$RESOURCE_MANAGER_IMAGE" -c ml-cluster || error "Failed to import image into cluster."

    # 5. Apply the Kubernetes manifests
    log "Applying updated Kubernetes manifests for resource-manager..."
    kubectl apply -f "$RESOURCE_MANAGER_DIR/k3s/" || error "Failed to apply Kubernetes manifests."

    # 6. Wait for the pods to be ready
    log "Waiting for resource-manager pods to become ready..."
    kubectl rollout status deployment/resource-manager -n resource-manager --timeout=300s || error "Timeout waiting for rollout to complete."

    log "resource-manager has been successfully updated! âœ¨"
}

update_resource_manager "$@"